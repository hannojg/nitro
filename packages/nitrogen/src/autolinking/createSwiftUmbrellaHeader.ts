import { NitroConfig } from '../config/NitroConfig.js'
import { includeHeader } from '../syntax/c++/includeNitroHeader.js'
import { getAllKnownTypes } from '../syntax/createType.js'
import { createFileMetadataString, isNotDuplicate } from '../syntax/helpers.js'
import type { SourceFile } from '../syntax/SourceFile.js'
import { SwiftCxxBridgedType } from '../syntax/swift/SwiftCxxBridgedType.js'

export function createSwiftUmbrellaHeader(): SourceFile {
  const moduleName = NitroConfig.getIosModuleName()
  const filename = `${moduleName}-Swift-Cxx-Umbrella.hpp`

  const types = getAllKnownTypes()

  const requiredImports = types
    .map((t) => new SwiftCxxBridgedType(t))
    .flatMap((b) => b.getRequiredImports())
  const includes = requiredImports
    .map((i) => includeHeader(i, false))
    .filter(isNotDuplicate)
  const forwardDeclarations = requiredImports
    .map((i) => i.forwardDeclaration)
    .filter((f) => f != null)
    .filter(isNotDuplicate)

  const code = `
${createFileMetadataString(filename, '///')}

#pragma once

// Forward declarations of C++ defined types
${forwardDeclarations.sort().join('\n')}

// Include C++ defined types
${includes.sort().join('\n')}

// Include Swift defined types
#if __has_include("${moduleName}-Swift.h")
#include "${moduleName}-Swift.h"
#else
#error ${moduleName}'s autogenerated Swift header cannot be found! Make sure the Swift module's name is actually "${moduleName}", and try building the app first.
#endif
`

  return {
    content: code,
    language: 'c++',
    name: filename,
    platform: 'ios',
    subdirectory: [],
  }
}
