///
/// HybridSwiftKotlinTestObjectSpecCxx.swift
/// Sun Aug 11 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridSwiftKotlinTestObjectSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public final class HybridSwiftKotlinTestObjectSpecCxx {
  private(set) var implementation: HybridSwiftKotlinTestObjectSpec

  public init(_ implementation: HybridSwiftKotlinTestObjectSpec) {
    self.implementation = implementation
  }

  // HybridObject C++ part
  public var hybridContext: margelo.nitro.HybridContext {
    get {
      return self.implementation.hybridContext
    }
    set {
      self.implementation.hybridContext = newValue
    }
  }

  // Memory size of the Swift class (plus size of any other allocations)
  public var memorySize: Int {
    return self.implementation.memorySize
  }

  // Properties
  public var numberValue: Double {
    @inline(__always)
    get {
      return self.implementation.numberValue
    }
    @inline(__always)
    set {
      self.implementation.numberValue = newValue
    }
  }
  
  public var boolValue: Bool {
    @inline(__always)
    get {
      return self.implementation.boolValue
    }
    @inline(__always)
    set {
      self.implementation.boolValue = newValue
    }
  }
  
  public var stringValue: String {
    @inline(__always)
    get {
      return self.implementation.stringValue
    }
    @inline(__always)
    set {
      self.implementation.stringValue = newValue
    }
  }
  
  public var bigintValue: Int64 {
    @inline(__always)
    get {
      return self.implementation.bigintValue
    }
    @inline(__always)
    set {
      self.implementation.bigintValue = newValue
    }
  }
  
  public var stringOrUndefined: String? {
    @inline(__always)
    get {
      return self.implementation.stringOrUndefined
    }
    @inline(__always)
    set {
      self.implementation.stringOrUndefined = newValue
    }
  }
  
  public var stringOrNull: String? {
    @inline(__always)
    get {
      return self.implementation.stringOrNull
    }
    @inline(__always)
    set {
      self.implementation.stringOrNull = newValue
    }
  }
  
  public var optionalString: String? {
    @inline(__always)
    get {
      return self.implementation.optionalString
    }
    @inline(__always)
    set {
      self.implementation.optionalString = newValue
    }
  }
  
  public var valueThatWillThrowOnAccess: Double {
    @inline(__always)
    get {
      return self.implementation.valueThatWillThrowOnAccess
    }
    @inline(__always)
    set {
      self.implementation.valueThatWillThrowOnAccess = newValue
    }
  }
  
  public var someTuple: (Double, String) {
    @inline(__always)
    get {
      return self.implementation.someTuple
    }
    @inline(__always)
    set {
      self.implementation.someTuple = newValue
    }
  }

  // Methods
  @inline(__always)
  public func simpleFunc() -> HybridSwiftKotlinTestObjectSpecCxx_simpleFunc_Result {
    do {
      try self.implementation.simpleFunc()
      return .value
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func addNumbers(a: Double, b: Double) -> HybridSwiftKotlinTestObjectSpecCxx_addNumbers_Result {
    do {
      let result = try self.implementation.addNumbers(a: a, b: b)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func addStrings(a: String, b: String) -> HybridSwiftKotlinTestObjectSpecCxx_addStrings_Result {
    do {
      let result = try self.implementation.addStrings(a: a, b: b)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func multipleArguments(num: Double, str: String, boo: Bool) -> HybridSwiftKotlinTestObjectSpecCxx_multipleArguments_Result {
    do {
      try self.implementation.multipleArguments(num: num, str: str, boo: boo)
      return .value
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func createMap() -> HybridSwiftKotlinTestObjectSpecCxx_createMap_Result {
    do {
      let result = try self.implementation.createMap()
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func mapRoundtrip(map: AnyMap) -> HybridSwiftKotlinTestObjectSpecCxx_mapRoundtrip_Result {
    do {
      let result = try self.implementation.mapRoundtrip(map: map)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func funcThatThrows() -> HybridSwiftKotlinTestObjectSpecCxx_funcThatThrows_Result {
    do {
      let result = try self.implementation.funcThatThrows()
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func tryOptionalParams(num: Double, boo: Bool, str: String?) -> HybridSwiftKotlinTestObjectSpecCxx_tryOptionalParams_Result {
    do {
      let result = try self.implementation.tryOptionalParams(num: num, boo: boo, str: str)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func tryMiddleParam(num: Double, boo: Bool?, str: String) -> HybridSwiftKotlinTestObjectSpecCxx_tryMiddleParam_Result {
    do {
      let result = try self.implementation.tryMiddleParam(num: num, boo: boo, str: str)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func flip(tuple: (Double, Double, Double)) -> HybridSwiftKotlinTestObjectSpecCxx_flip_Result {
    do {
      let result = try self.implementation.flip(tuple: tuple)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func passTuple(tuple: (Double, String, Bool)) -> HybridSwiftKotlinTestObjectSpecCxx_passTuple_Result {
    do {
      let result = try self.implementation.passTuple(tuple: tuple)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func calculateFibonacciSync(value: Double) -> HybridSwiftKotlinTestObjectSpecCxx_calculateFibonacciSync_Result {
    do {
      let result = try self.implementation.calculateFibonacciSync(value: value)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func calculateFibonacciAsync(value: Double) -> HybridSwiftKotlinTestObjectSpecCxx_calculateFibonacciAsync_Result {
    do {
      let result = try self.implementation.calculateFibonacciAsync(value: value)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func wait(seconds: Double) -> HybridSwiftKotlinTestObjectSpecCxx_wait_Result {
    do {
      let result = try self.implementation.wait(seconds: seconds)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func callCallback(callback: margelo.nitro.image.Func_void) -> HybridSwiftKotlinTestObjectSpecCxx_callCallback_Result {
    do {
      try self.implementation.callCallback(callback: callback)
      return .value
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func callAll(first: margelo.nitro.image.Func_void, second: margelo.nitro.image.Func_void, third: margelo.nitro.image.Func_void) -> HybridSwiftKotlinTestObjectSpecCxx_callAll_Result {
    do {
      try self.implementation.callAll(first: first, second: second, third: third)
      return .value
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func getCar() -> HybridSwiftKotlinTestObjectSpecCxx_getCar_Result {
    do {
      let result = try self.implementation.getCar()
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func isCarElectric(car: margelo.nitro.image.Car) -> HybridSwiftKotlinTestObjectSpecCxx_isCarElectric_Result {
    do {
      let result = try self.implementation.isCarElectric(car: car)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func getDriver(car: margelo.nitro.image.Car) -> HybridSwiftKotlinTestObjectSpecCxx_getDriver_Result {
    do {
      let result = try self.implementation.getDriver(car: car)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func createArrayBuffer() -> HybridSwiftKotlinTestObjectSpecCxx_createArrayBuffer_Result {
    do {
      let result = try self.implementation.createArrayBuffer()
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func getBufferLastItem(buffer: ArrayBuffer) -> HybridSwiftKotlinTestObjectSpecCxx_getBufferLastItem_Result {
    do {
      let result = try self.implementation.getBufferLastItem(buffer: buffer)
      return .value(result)
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
  
  @inline(__always)
  public func setAllValuesTo(buffer: ArrayBuffer, value: Double) -> HybridSwiftKotlinTestObjectSpecCxx_setAllValuesTo_Result {
    do {
      try self.implementation.setAllValuesTo(buffer: buffer, value: value)
      return .value
    } catch RuntimeError.error(withMessage: let message) {
      // A  `RuntimeError` was thrown.
      return .error(message: message)
    } catch {
      // Any other kind of error was thrown.
      // Due to a Swift bug, we have to copy the string here.
      let message = "\(error.localizedDescription)"
      return .error(message: message)
    }
  }
}
