///
/// HybridChildSpecCxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridChildSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class HybridChildSpecCxx : HybridBaseSpecCxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::image::bridge::swift`)
   * from `NitroImage-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.image.bridge.swift

  /**
   * Holds an instance of the `HybridChildSpec` Swift protocol.
   */
  private var implementation: HybridChildSpec

  /**
   * Get the actual `HybridChildSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridChildSpec() -> HybridChildSpec {
    return implementation
  }

  /**
   * Create a new `HybridChildSpecCxx` that wraps the given `HybridChildSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: HybridChildSpec) {
    self.implementation = implementation
    super.init(implementation)
  }

  /**
   * Contains a (weak) reference to the C++ HybridObject to cache it.
   */
  public override var hybridContext: margelo.nitro.HybridContext {
    get {
      return self.implementation.hybridContext
    }
    set {
      self.implementation.hybridContext = newValue
    }
  }

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  public override var memorySize: Int {
    return self.implementation.memorySize
  }

  // Properties
  public var childValue: Double {
    @inline(__always)
    get {
      return self.implementation.childValue
    }
  }

  // Methods
  
}
