///
/// HybridSwiftKotlinTestObjectSpecCxx+ResultTypes.swift
/// Wed Aug 14 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

/**
 * C++ does not support catching Swift errors yet, so we have to wrap
 * them in a Result type.
 * - .successful means the function returned successfully (either a value, or void)
 * - .failure means the function threw any Error. Only the message can be propagated
 *
 * HybridSwiftKotlinTestObjectSpecCxx will then wrap all calls to HybridSwiftKotlinTestObjectSpec
 * to properly catch Swift errors and return either .successful or .failure to C++.
 */

import NitroModules

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.simpleFunc(...).
 * Original func:
 * ```swift
 * func simpleFunc() throws -> Void
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.simpleFunc()`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_simpleFunc_Result {
  case successful
  case failure(error: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.addNumbers(...).
 * Original func:
 * ```swift
 * func addNumbers(a: Double, b: Double) throws -> Double
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.addNumbers(a:, b:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_addNumbers_Result {
  case successful(Double)
  case failure(error: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.addStrings(...).
 * Original func:
 * ```swift
 * func addStrings(a: String, b: String) throws -> String
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.addStrings(a:, b:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_addStrings_Result {
  case successful(std.string)
  case failure(error: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.multipleArguments(...).
 * Original func:
 * ```swift
 * func multipleArguments(num: Double, str: String, boo: Bool) throws -> Void
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.multipleArguments(num:, str:, boo:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_multipleArguments_Result {
  case successful
  case failure(error: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.getNumbers(...).
 * Original func:
 * ```swift
 * func getNumbers() throws -> [Double]
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.getNumbers()`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_getNumbers_Result {
  case successful(margelo.nitro.image.bridge.swift.std__vector_double_)
  case failure(error: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.getStrings(...).
 * Original func:
 * ```swift
 * func getStrings() throws -> [String]
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.getStrings()`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_getStrings_Result {
  case successful(margelo.nitro.image.bridge.swift.std__vector_std__string_)
  case failure(error: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.callCallback(...).
 * Original func:
 * ```swift
 * func callCallback(callback: (@escaping () -> Void)) throws -> Void
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.callCallback(callback:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_callCallback_Result {
  case successful
  case failure(error: String)
}
