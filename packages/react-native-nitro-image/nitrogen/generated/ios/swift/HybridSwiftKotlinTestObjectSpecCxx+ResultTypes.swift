///
/// HybridSwiftKotlinTestObjectSpecCxx+ResultTypes.swift
/// Sun Aug 11 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

/**
 * C++ does not support catching Swift errors yet, so we have to wrap
 * them in a Result type.
 * - .value means the function returned successfully (either a value, or void)
 * - .error means the function threw any Error. Only the message can be propagated
 *
 * HybridSwiftKotlinTestObjectSpecCxx will then wrap all calls to HybridSwiftKotlinTestObjectSpec
 * to properly catch Swift errors and return either .value or .error to C++.
 */

import NitroModules

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.simpleFunc(...).
 * Original func:
 * ```swift
 * func simpleFunc() throws -> Void
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.simpleFunc()`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_simpleFunc_Result {
  case value
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.addNumbers(...).
 * Original func:
 * ```swift
 * func addNumbers(a: Double, b: Double) throws -> Double
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.addNumbers(a:, b:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_addNumbers_Result {
  case value(Double)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.addStrings(...).
 * Original func:
 * ```swift
 * func addStrings(a: String, b: String) throws -> String
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.addStrings(a:, b:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_addStrings_Result {
  case value(String)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.multipleArguments(...).
 * Original func:
 * ```swift
 * func multipleArguments(num: Double, str: String, boo: Bool) throws -> Void
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.multipleArguments(num:, str:, boo:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_multipleArguments_Result {
  case value
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.createMap(...).
 * Original func:
 * ```swift
 * func createMap() throws -> AnyMap
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.createMap()`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_createMap_Result {
  case value(AnyMap)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.mapRoundtrip(...).
 * Original func:
 * ```swift
 * func mapRoundtrip(map: AnyMap) throws -> AnyMap
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.mapRoundtrip(map:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_mapRoundtrip_Result {
  case value(AnyMap)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.funcThatThrows(...).
 * Original func:
 * ```swift
 * func funcThatThrows() throws -> Double
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.funcThatThrows()`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_funcThatThrows_Result {
  case value(Double)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.tryOptionalParams(...).
 * Original func:
 * ```swift
 * func tryOptionalParams(num: Double, boo: Bool, str: String?) throws -> String
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.tryOptionalParams(num:, boo:, str:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_tryOptionalParams_Result {
  case value(String)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.tryMiddleParam(...).
 * Original func:
 * ```swift
 * func tryMiddleParam(num: Double, boo: Bool?, str: String) throws -> String
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.tryMiddleParam(num:, boo:, str:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_tryMiddleParam_Result {
  case value(String)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.flip(...).
 * Original func:
 * ```swift
 * func flip(tuple: (Double, Double, Double)) throws -> (Double, Double, Double)
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.flip(tuple:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_flip_Result {
  case value((Double, Double, Double))
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.passTuple(...).
 * Original func:
 * ```swift
 * func passTuple(tuple: (Double, String, Bool)) throws -> (Double, String, Bool)
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.passTuple(tuple:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_passTuple_Result {
  case value((Double, String, Bool))
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.calculateFibonacciSync(...).
 * Original func:
 * ```swift
 * func calculateFibonacciSync(value: Double) throws -> Int64
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.calculateFibonacciSync(value:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_calculateFibonacciSync_Result {
  case value(Int64)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.calculateFibonacciAsync(...).
 * Original func:
 * ```swift
 * func calculateFibonacciAsync(value: Double) async throws -> Int64
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.calculateFibonacciAsync(value:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_calculateFibonacciAsync_Result {
  case value(Int64)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.wait(...).
 * Original func:
 * ```swift
 * func wait(seconds: Double) async throws -> Void
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.wait(seconds:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_wait_Result {
  case value(Void)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.callCallback(...).
 * Original func:
 * ```swift
 * func callCallback(callback: margelo.nitro.image.Func_void) throws -> Void
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.callCallback(callback:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_callCallback_Result {
  case value
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.callAll(...).
 * Original func:
 * ```swift
 * func callAll(first: margelo.nitro.image.Func_void, second: margelo.nitro.image.Func_void, third: margelo.nitro.image.Func_void) throws -> Void
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.callAll(first:, second:, third:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_callAll_Result {
  case value
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.getCar(...).
 * Original func:
 * ```swift
 * func getCar() throws -> margelo.nitro.image.Car
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.getCar()`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_getCar_Result {
  case value(margelo.nitro.image.Car)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.isCarElectric(...).
 * Original func:
 * ```swift
 * func isCarElectric(car: margelo.nitro.image.Car) throws -> Bool
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.isCarElectric(car:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_isCarElectric_Result {
  case value(Bool)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.getDriver(...).
 * Original func:
 * ```swift
 * func getDriver(car: margelo.nitro.image.Car) throws -> margelo.nitro.image.Person?
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.getDriver(car:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_getDriver_Result {
  case value(margelo.nitro.image.Person?)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.createArrayBuffer(...).
 * Original func:
 * ```swift
 * func createArrayBuffer() throws -> ArrayBuffer
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.createArrayBuffer()`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_createArrayBuffer_Result {
  case value(ArrayBuffer)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.getBufferLastItem(...).
 * Original func:
 * ```swift
 * func getBufferLastItem(buffer: ArrayBuffer) throws -> Double
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.getBufferLastItem(buffer:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_getBufferLastItem_Result {
  case value(Double)
  case error(message: String)
}

/**
 * The exception-free result type for HybridSwiftKotlinTestObjectSpec.setAllValuesTo(...).
 * Original func:
 * ```swift
 * func setAllValuesTo(buffer: ArrayBuffer, value: Double) throws -> Void
 * ```
 * - seealso: `HybridSwiftKotlinTestObjectSpec.setAllValuesTo(buffer:, value:)`
 */
@frozen
public enum HybridSwiftKotlinTestObjectSpecCxx_setAllValuesTo_Result {
  case value
  case error(message: String)
}
