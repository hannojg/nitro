///
/// HybridImageFactorySpecCxx.swift
/// Mon Aug 12 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridImageFactorySpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public final class HybridImageFactorySpecCxx {
  private(set) var implementation: HybridImageFactorySpec

  public init(_ implementation: HybridImageFactorySpec) {
    self.implementation = implementation
  }

  // HybridObject C++ part
  public var hybridContext: margelo.nitro.HybridContext {
    get {
      return self.implementation.hybridContext
    }
    set {
      self.implementation.hybridContext = newValue
    }
  }

  // Memory size of the Swift class (plus size of any other allocations)
  public var memorySize: Int {
    return self.implementation.memorySize
  }

  // Properties
  

  // Methods
  @inline(__always)
  public func loadImageFromFile(path: String) -> HybridImageSpecCxx {
    do {
      return try self.implementation.loadImageFromFile(path: path).createCxxBridge()
    } catch {
      // TODO: Wait for https://github.com/swiftlang/swift/issues/75290
      fatalError("Swift errors cannot be propagated to C++ yet! If you want to throw errors, consider using a Promise (async) or a variant type (sync) instead.")
    }
  }
  
  @inline(__always)
  public func loadImageFromURL(path: String) -> HybridImageSpecCxx {
    do {
      return try self.implementation.loadImageFromURL(path: path).createCxxBridge()
    } catch {
      // TODO: Wait for https://github.com/swiftlang/swift/issues/75290
      fatalError("Swift errors cannot be propagated to C++ yet! If you want to throw errors, consider using a Promise (async) or a variant type (sync) instead.")
    }
  }
  
  @inline(__always)
  public func loadImageFromSystemName(path: String) -> HybridImageSpecCxx {
    do {
      return try self.implementation.loadImageFromSystemName(path: path).createCxxBridge()
    } catch {
      // TODO: Wait for https://github.com/swiftlang/swift/issues/75290
      fatalError("Swift errors cannot be propagated to C++ yet! If you want to throw errors, consider using a Promise (async) or a variant type (sync) instead.")
    }
  }
  
  @inline(__always)
  public func bounceBack(image: HybridImageSpecCxx) -> HybridImageSpecCxx {
    do {
      return try self.implementation.bounceBack(image: image.implementation).createCxxBridge()
    } catch {
      // TODO: Wait for https://github.com/swiftlang/swift/issues/75290
      fatalError("Swift errors cannot be propagated to C++ yet! If you want to throw errors, consider using a Promise (async) or a variant type (sync) instead.")
    }
  }
}
