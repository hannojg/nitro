///
/// CallbackHolder.swift
/// Thu Aug 15 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `CallbackHolder`, backed by a C++ struct.
 */
public typealias CallbackHolder = margelo.nitro.image.CallbackHolder

public extension CallbackHolder {
  private typealias bridge = margelo.nitro.image.bridge.swift

  /**
   * Create a new instance of `CallbackHolder`.
   */
  init(callback: ((_ val: String) -> Void)) {
    self.init({ () -> bridge.Func_void_std__string
      let context = Unmanaged.passRetained(ClosureWrapper(closure: callback)).toOpaque()
      return bridge.create_Func_void_std__string({ context in
        guard let context else { fatalError("Context was null, even though we created one!") }
        let closure = Unmanaged<ClosureWrapper>.fromOpaque(context).takeRetainedValue()
        closure.invoke()
      })
    }())
  }

  var callback: ((_ val: String) -> Void) {
    @inline(__always)
    get {
      return { (val: String) -> Void in
        self.__callback(std.string(val))
      }
    }
    @inline(__always)
    set {
      self.__callback = { () -> bridge.Func_void_std__string
        let context = Unmanaged.passRetained(ClosureWrapper(closure: newValue)).toOpaque()
        return bridge.create_Func_void_std__string({ context in
          guard let context else { fatalError("Context was null, even though we created one!") }
          let closure = Unmanaged<ClosureWrapper>.fromOpaque(context).takeRetainedValue()
          closure.invoke()
        })
      }()
    }
  }
}
