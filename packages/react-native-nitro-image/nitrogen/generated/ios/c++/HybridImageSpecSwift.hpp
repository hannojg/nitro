///
/// HybridImageSpecSwift.hpp
/// Mon Aug 12 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridImageSpec.hpp"

// Forward declaration of `HybridImageSpecCxx` to properly resolve imports.
namespace NitroImage { class HybridImageSpecCxx; }

// Forward declaration of `ImageSize` to properly resolve imports.
namespace margelo::nitro::image { struct ImageSize; }
// Forward declaration of `PixelFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class PixelFormat; }
// Forward declaration of `ImageFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class ImageFormat; }

#include "ImageSize.hpp"
#include "PixelFormat.hpp"
#include "ImageFormat.hpp"
#include "Func_void_std__string.hpp"

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "NitroImage-Swift-Cxx-Umbrella.hpp"

#if __has_include(<NitroModules/JSIConverter+Swift.hpp>)
#include <NitroModules/JSIConverter+Swift.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::image {

  /**
   * The C++ part of HybridImageSpecCxx.swift.
   *
   * HybridImageSpecSwift (C++) accesses HybridImageSpecCxx (Swift), and exposes
   * Swift types directly to JSI using `JSIConverter<T>` overloads from "JSIConverter+Swift.hpp".
   */
  class HybridImageSpecSwift final: public HybridImageSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridImageSpecSwift(const NitroImage::HybridImageSpecCxx& swiftPart): HybridImageSpec(), _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroImage::HybridImageSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }


  public:
    // Properties using Swift types
    inline ImageSize getSize_swift() noexcept {
      return _swiftPart.getSize();
    }
    inline PixelFormat getPixelFormat_swift() {
      throw std::runtime_error("Enums dont work in Swift yet!");
    }
    inline double getSomeSettableProp_swift() noexcept {
      return _swiftPart.getSomeSettableProp();
    }
    
    inline void setSomeSettableProp_swift(double newValue) noexcept {
      _swiftPart.setSomeSettableProp(newValue);
    }

  public:
    // Methods using Swift types
    inline double toArrayBuffer_swift(ImageFormat format) noexcept {
      throw std::runtime_error("Enums dont work in Swift yet!");
    }
    inline void saveToFile_swift(swift::String path,Func_void_std__string onFinished) noexcept {
      return _swiftPart.saveToFile(path,onFinished);
    }

  public:
    void loadHybridMethods() override {
      // load base methods/properties
      HybridImageSpec::loadHybridMethods();
      // load custom methods/properties
      registerHybrids(this, [](Prototype& prototype) {
        prototype.registerHybridGetter("size", &HybridImageSpecSwift::getSize_swift);
        prototype.registerHybridGetter("pixelFormat", &HybridImageSpecSwift::getPixelFormat_swift);
        prototype.registerHybridGetter("someSettableProp", &HybridImageSpecSwift::getSomeSettableProp_swift);
        prototype.registerHybridSetter("someSettableProp", &HybridImageSpecSwift::setSomeSettableProp_swift);
        prototype.registerHybridMethod("toArrayBuffer", &HybridImageSpecSwift::toArrayBuffer_swift);
        prototype.registerHybridMethod("saveToFile", &HybridImageSpecSwift::saveToFile_swift);
      });
    }

  public:
    // Properties inherited from base, currently throwing
    inline ImageSize getSize() override {
      throw std::runtime_error("\"size\" is implemented in Swift, and Nitro does currently not bridge between Swift and C++!");
    }
    inline PixelFormat getPixelFormat() override {
      throw std::runtime_error("\"pixelFormat\" is implemented in Swift, and Nitro does currently not bridge between Swift and C++!");
    }
    inline double getSomeSettableProp() override {
      throw std::runtime_error("\"someSettableProp\" is implemented in Swift, and Nitro does currently not bridge between Swift and C++!");
    }
    inline void setSomeSettableProp(double someSettableProp) override {
      throw std::runtime_error("\"someSettableProp\" is implemented in Swift, and Nitro does currently not bridge between Swift and C++!");
    }

  public:
    // Methods inherited from base, currently throwing
    inline double toArrayBuffer(ImageFormat format) override {
      throw std::runtime_error("\"toArrayBuffer(..)\" is implemented in Swift, and Nitro does currently not bridge between Swift and C++!");
    }
    inline void saveToFile(const std::string& path, const Func_void_std__string& onFinished) override {
      throw std::runtime_error("\"saveToFile(..)\" is implemented in Swift, and Nitro does currently not bridge between Swift and C++!");
    }

  private:
    NitroImage::HybridImageSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::image
