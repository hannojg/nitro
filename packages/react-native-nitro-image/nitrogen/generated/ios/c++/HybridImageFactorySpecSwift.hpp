///
/// HybridImageFactorySpecSwift.hpp
/// Mon Aug 12 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridImageFactorySpec.hpp"

// Forward declaration of `HybridImageFactorySpecCxx` to properly resolve imports.
namespace NitroImage { class HybridImageFactorySpecCxx; }

// Forward declaration of `HybridImageSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageSpec; }
// Forward declaration of `HybridImageSpecSwift` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageSpecSwift; }

#include "HybridImageSpec.hpp"
#include "HybridImageSpecSwift.hpp"

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "NitroImage-Swift-Cxx-Umbrella.hpp"

#if __has_include(<NitroModules/JSIConverter+Swift.hpp>)
#include <NitroModules/JSIConverter+Swift.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::image {

  /**
   * The C++ part of HybridImageFactorySpecCxx.swift.
   *
   * HybridImageFactorySpecSwift (C++) accesses HybridImageFactorySpecCxx (Swift), and exposes
   * Swift types directly to JSI using `JSIConverter<T>` overloads from "JSIConverter+Swift.hpp".
   */
  class HybridImageFactorySpecSwift final: public HybridImageFactorySpec {
  public:
    // Constructor from a Swift instance
    explicit HybridImageFactorySpecSwift(const NitroImage::HybridImageFactorySpecCxx& swiftPart): HybridImageFactorySpec(), _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroImage::HybridImageFactorySpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }


  public:
    // Properties using Swift types
    

  public:
    // Methods using Swift types
    inline std::shared_ptr<margelo::nitro::image::HybridImageSpec> loadImageFromFile_swift(swift::String path) noexcept {
      auto result = _swiftPart.loadImageFromFile(path);
      return HybridContext::getOrCreate<HybridImageSpecSwift>(result);
    }
    inline std::shared_ptr<margelo::nitro::image::HybridImageSpec> loadImageFromURL_swift(swift::String path) noexcept {
      auto result = _swiftPart.loadImageFromURL(path);
      return HybridContext::getOrCreate<HybridImageSpecSwift>(result);
    }
    inline std::shared_ptr<margelo::nitro::image::HybridImageSpec> loadImageFromSystemName_swift(swift::String path) noexcept {
      auto result = _swiftPart.loadImageFromSystemName(path);
      return HybridContext::getOrCreate<HybridImageSpecSwift>(result);
    }
    inline std::shared_ptr<margelo::nitro::image::HybridImageSpec> bounceBack_swift(std::shared_ptr<margelo::nitro::image::HybridImageSpec> image) noexcept {
      auto result = _swiftPart.bounceBack(std::static_pointer_cast<HybridImageSpecSwift>(image)->getSwiftPart());
      return HybridContext::getOrCreate<HybridImageSpecSwift>(result);
    }

  public:
    void loadHybridMethods() override {
      // load base methods/properties
      HybridImageFactorySpec::loadHybridMethods();
      // load custom methods/properties
      registerHybrids(this, [](Prototype& prototype) {
        prototype.registerHybridMethod("loadImageFromFile", &HybridImageFactorySpecSwift::loadImageFromFile_swift);
        prototype.registerHybridMethod("loadImageFromURL", &HybridImageFactorySpecSwift::loadImageFromURL_swift);
        prototype.registerHybridMethod("loadImageFromSystemName", &HybridImageFactorySpecSwift::loadImageFromSystemName_swift);
        prototype.registerHybridMethod("bounceBack", &HybridImageFactorySpecSwift::bounceBack_swift);
      });
    }

  public:
    // Properties inherited from base, currently throwing
    

  public:
    // Methods inherited from base, currently throwing
    inline std::shared_ptr<margelo::nitro::image::HybridImageSpec> loadImageFromFile(const std::string& path) override {
      throw std::runtime_error("\"loadImageFromFile(..)\" is implemented in Swift, and Nitro does currently not bridge between Swift and C++!");
    }
    inline std::shared_ptr<margelo::nitro::image::HybridImageSpec> loadImageFromURL(const std::string& path) override {
      throw std::runtime_error("\"loadImageFromURL(..)\" is implemented in Swift, and Nitro does currently not bridge between Swift and C++!");
    }
    inline std::shared_ptr<margelo::nitro::image::HybridImageSpec> loadImageFromSystemName(const std::string& path) override {
      throw std::runtime_error("\"loadImageFromSystemName(..)\" is implemented in Swift, and Nitro does currently not bridge between Swift and C++!");
    }
    inline std::shared_ptr<margelo::nitro::image::HybridImageSpec> bounceBack(const std::shared_ptr<margelo::nitro::image::HybridImageSpec>& image) override {
      throw std::runtime_error("\"bounceBack(..)\" is implemented in Swift, and Nitro does currently not bridge between Swift and C++!");
    }

  private:
    NitroImage::HybridImageFactorySpecCxx _swiftPart;
  };

} // namespace margelo::nitro::image
