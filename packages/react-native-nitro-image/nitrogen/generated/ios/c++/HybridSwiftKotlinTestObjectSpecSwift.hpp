///
/// HybridSwiftKotlinTestObjectSpecSwift.hpp
/// Mon Aug 12 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridSwiftKotlinTestObjectSpec.hpp"

// Forward declaration of `HybridSwiftKotlinTestObjectSpecCxx` to properly resolve imports.
namespace NitroImage { class HybridSwiftKotlinTestObjectSpecCxx; }

// Forward declaration of `Car` to properly resolve imports.
namespace margelo::nitro::image { struct Car; }
// Forward declaration of `Person` to properly resolve imports.
namespace margelo::nitro::image { struct Person; }

#include "Car.hpp"
#include "Person.hpp"

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "NitroImage-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::image {

  /**
   * The C++ part of HybridSwiftKotlinTestObjectSpecCxx.swift.
   *
   * HybridSwiftKotlinTestObjectSpecSwift (C++) accesses HybridSwiftKotlinTestObjectSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridSwiftKotlinTestObjectSpecCxx can directly inherit from the C++ class HybridSwiftKotlinTestObjectSpec
   * to simplify the whole structure and memory management.
   */
  class HybridSwiftKotlinTestObjectSpecSwift final: public HybridSwiftKotlinTestObjectSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridSwiftKotlinTestObjectSpecSwift(const NitroImage::HybridSwiftKotlinTestObjectSpecCxx& swiftPart): HybridSwiftKotlinTestObjectSpec(), _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroImage::HybridSwiftKotlinTestObjectSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline double getNumberValue() noexcept override {
      return _swiftPart.getNumberValue();
    }
    inline void setNumberValue(double numberValue) noexcept override {
      _swiftPart.setNumberValue(std::forward<decltype(numberValue)>(numberValue));
    }
    inline bool getBoolValue() noexcept override {
      return _swiftPart.getBoolValue();
    }
    inline void setBoolValue(bool boolValue) noexcept override {
      _swiftPart.setBoolValue(std::forward<decltype(boolValue)>(boolValue));
    }
    inline std::string getStringValue() noexcept override {
      auto result = _swiftPart.getStringValue();
      return result;
    }
    inline void setStringValue(const std::string& stringValue) noexcept override {
      _swiftPart.setStringValue(swift::String(stringValue));
    }
    inline int64_t getBigintValue() noexcept override {
      return _swiftPart.getBigintValue();
    }
    inline void setBigintValue(int64_t bigintValue) noexcept override {
      _swiftPart.setBigintValue(std::forward<decltype(bigintValue)>(bigintValue));
    }
    inline std::optional<std::string> getStringOrUndefined() noexcept override {
      auto result = _swiftPart.getStringOrUndefined();
      return result ? std::optional<std::string>(result.get()) : std::nullopt;
    }
    inline void setStringOrUndefined(const std::optional<std::string>& stringOrUndefined) noexcept override {
      _swiftPart.setStringOrUndefined(stringOrUndefined.has_value() ? swift::Optional<swift::String>::some(stringOrUndefined.value()) : swift::Optional<swift::String>::none());
    }
    inline std::optional<std::string> getStringOrNull() noexcept override {
      auto result = _swiftPart.getStringOrNull();
      return result ? std::optional<std::string>(result.get()) : std::nullopt;
    }
    inline void setStringOrNull(const std::optional<std::string>& stringOrNull) noexcept override {
      _swiftPart.setStringOrNull(stringOrNull.has_value() ? swift::Optional<swift::String>::some(stringOrNull.value()) : swift::Optional<swift::String>::none());
    }
    inline std::optional<std::string> getOptionalString() noexcept override {
      auto result = _swiftPart.getOptionalString();
      return result ? std::optional<std::string>(result.get()) : std::nullopt;
    }
    inline void setOptionalString(const std::optional<std::string>& optionalString) noexcept override {
      _swiftPart.setOptionalString(optionalString.has_value() ? swift::Optional<swift::String>::some(optionalString.value()) : swift::Optional<swift::String>::none());
    }

  public:
    // Methods
    inline void simpleFunc() override {
      _swiftPart.simpleFunc();
    }
    inline double addNumbers(double a, double b) override {
      auto result = _swiftPart.addNumbers(std::forward<decltype(a)>(a), std::forward<decltype(b)>(b));
      return result;
    }
    inline std::string addStrings(const std::string& a, const std::string& b) override {
      auto result = _swiftPart.addStrings(swift::String(a), swift::String(b));
      return result;
    }
    inline void multipleArguments(double num, const std::string& str, bool boo) override {
      _swiftPart.multipleArguments(std::forward<decltype(num)>(num), swift::String(str), std::forward<decltype(boo)>(boo));
    }
    inline std::vector<double> createNumbers() override {
      auto result = _swiftPart.createNumbers();
      return [&]() -> std::vector<double> {
        std::vector<double> vector;
        vector.reserve(result.getCount());
        for (double i : result) {
          vector.push_back(i);
        }
        return vector;
      }();
    }
    inline std::vector<std::string> createStrings() override {
      auto result = _swiftPart.createStrings();
      return [&]() -> std::vector<std::string> {
        std::vector<std::string> vector;
        vector.reserve(result.getCount());
        for (const swift::String& i : result) {
          vector.push_back(i);
        }
        return vector;
      }();
    }
    inline std::string tryOptionalParams(double num, bool boo, const std::optional<std::string>& str) override {
      auto result = _swiftPart.tryOptionalParams(std::forward<decltype(num)>(num), std::forward<decltype(boo)>(boo), str.has_value() ? swift::Optional<swift::String>::some(str.value()) : swift::Optional<swift::String>::none());
      return result;
    }
    inline std::string tryMiddleParam(double num, std::optional<bool> boo, const std::string& str) override {
      auto result = _swiftPart.tryMiddleParam(std::forward<decltype(num)>(num), boo.has_value() ? swift::Optional<bool>::some(boo.value()) : swift::Optional<bool>::none(), swift::String(str));
      return result;
    }
    inline Car getCar() override {
      auto result = _swiftPart.getCar();
      return result;
    }
    inline bool isCarElectric(const Car& car) override {
      auto result = _swiftPart.isCarElectric(std::forward<decltype(car)>(car));
      return result;
    }
    inline std::optional<Person> getDriver(const Car& car) override {
      auto result = _swiftPart.getDriver(std::forward<decltype(car)>(car));
      return result ? std::optional<Person>(result.get()) : std::nullopt;
    }

  private:
    NitroImage::HybridSwiftKotlinTestObjectSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::image
