///
/// NitroImage-Swift-Cxx-Bridge.swift
/// Wed Aug 28 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import NitroModules

internal typealias bridge = margelo.nitro.image.bridge.swift


internal extension ImageSize {
  static func fromSwift(_ value: ImageSize) -> ImageSize {
    return value
  }

  func toSwift() -> ImageSize {
    return self
  }
}
  


internal extension PixelFormat {
  static func fromSwift(_ value: PixelFormat) -> PixelFormat {
    return value
  }

  func toSwift() -> PixelFormat {
    return self
  }
}
  


internal extension ImageFormat {
  static func fromSwift(_ value: ImageFormat) -> ImageFormat {
    return value
  }

  func toSwift() -> ImageFormat {
    return self
  }
}
  


internal extension std.string {
  static func fromSwift(_ value: String) -> std.string {
    return std.string(value)
  }

  func toSwift() -> String {
    return String(self)
  }
}
  


internal extension HybridImageSpecCxx {
  static func fromSwift(_ value: HybridImageSpec) -> HybridImageSpecCxx {
    return value.createCxxBridge()
  }

  func toSwift() -> HybridImageSpec {
    return self.implementation
  }
}
  


internal extension bridge.std__optional_std__string_ {
  static func fromSwift(_ value: String?) -> bridge.std__optional_std__string_ {
    return { () -> bridge.std__optional_std__string_ in
      if let actualValue = value {
        return bridge.create_std__optional_std__string_(std.string(actualValue))
      } else {
        return .init()
      }
    }()
  }

  func toSwift() -> String? {
    return { () -> String? in
      if let actualValue = self.value {
        return String(actualValue)
      } else {
        return nil
      }
    }()
  }
}
  


internal extension bridge.std__variant_std__string__double_ {
  static func fromSwift(_ value: Variant_String_Double) -> bridge.std__variant_std__string__double_ {
    return { () -> bridge.std__variant_std__string__double_ in
      switch value {
        case .someString(let value):
          return margelo.nitro.image.create_std__variant_std__string__double_(std.string(value))
        case .someDouble(let value):
          return margelo.nitro.image.create_std__variant_std__string__double_(value)
      }
    }()
  }

  func toSwift() -> Variant_String_Double {
    return { () -> Variant_String_Double in
      switch self.index() {
        case 0:
          let actual = bridge.get_std__variant_std__string__double__0(self)
          return .someString(String(actual))
        case 1:
          let actual = bridge.get_std__variant_std__string__double__1(self)
          return .someDouble(actual)
        default:
          fatalError("Variant can never have index \(self.index())!")
      }
    }()
  }
}
  


internal extension HybridTestObjectSpecCxx {
  static func fromSwift(_ value: HybridTestObjectSpec) -> HybridTestObjectSpecCxx {
    return value.createCxxBridge()
  }

  func toSwift() -> HybridTestObjectSpec {
    return self.implementation
  }
}
  


internal extension margelo.nitro.TSharedMap {
  static func fromSwift(_ value: AnyMapHolder) -> margelo.nitro.TSharedMap {
    return value.cppPart
  }

  func toSwift() -> AnyMapHolder {
    return AnyMapHolder(withCppPart: self)
  }
}
  


internal extension bridge.std__optional_bool_ {
  static func fromSwift(_ value: Bool?) -> bridge.std__optional_bool_ {
    return { () -> bridge.std__optional_bool_ in
      if let actualValue = value {
        return bridge.create_std__optional_bool_(actualValue)
      } else {
        return .init()
      }
    }()
  }

  func toSwift() -> Bool? {
    return { () -> Bool? in
      if let actualValue = self.value {
        return actualValue
      } else {
        return nil
      }
    }()
  }
}
  


internal extension bridge.std__vector_double_ {
  static func fromSwift(_ value: [Double]) -> bridge.std__vector_double_ {
    return { () -> bridge.std__vector_double_ in
      var vector = bridge.create_std__vector_double_(value.count)
      for item in value {
        vector.push_back(item)
      }
      return vector
    }()
  }

  func toSwift() -> [Double] {
    return self.map({ val in val })
  }
}
  


internal extension bridge.std__vector_std__string_ {
  static func fromSwift(_ value: [String]) -> bridge.std__vector_std__string_ {
    return { () -> bridge.std__vector_std__string_ in
      var vector = bridge.create_std__vector_std__string_(value.count)
      for item in value {
        vector.push_back(std.string(item))
      }
      return vector
    }()
  }

  func toSwift() -> [String] {
    return self.map({ val in String(val) })
  }
}
  


internal extension bridge.std__variant_std__string__double__bool__std__vector_double___std__vector_std__string__ {
  static func fromSwift(_ value: Variant_String_Double_Bool_[Double]_[String]) -> bridge.std__variant_std__string__double__bool__std__vector_double___std__vector_std__string__ {
    return { () -> bridge.std__variant_std__string__double__bool__std__vector_double___std__vector_std__string__ in
      switch value {
        case .someString(let value):
          return margelo.nitro.image.create_std__variant_std__string__double__bool__std__vector_double___std__vector_std__string__(std.string(value))
        case .someDouble(let value):
          return margelo.nitro.image.create_std__variant_std__string__double__bool__std__vector_double___std__vector_std__string__(value)
        case .someBool(let value):
          return margelo.nitro.image.create_std__variant_std__string__double__bool__std__vector_double___std__vector_std__string__(value)
        case .some[Double](let value):
          return margelo.nitro.image.create_std__variant_std__string__double__bool__std__vector_double___std__vector_std__string__({ () -> bridge.std__vector_double_ in
          var vector = bridge.create_std__vector_double_(value.count)
          for item in value {
            vector.push_back(item)
          }
          return vector
        }())
        case .some[String](let value):
          return margelo.nitro.image.create_std__variant_std__string__double__bool__std__vector_double___std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
          var vector = bridge.create_std__vector_std__string_(value.count)
          for item in value {
            vector.push_back(std.string(item))
          }
          return vector
        }())
      }
    }()
  }

  func toSwift() -> Variant_String_Double_Bool_[Double]_[String] {
    return { () -> Variant_String_Double_Bool_[Double]_[String] in
      switch self.index() {
        case 0:
          let actual = bridge.get_std__variant_std__string__double__bool__std__vector_double___std__vector_std__string___0(self)
          return .someString(String(actual))
        case 1:
          let actual = bridge.get_std__variant_std__string__double__bool__std__vector_double___std__vector_std__string___1(self)
          return .someDouble(actual)
        case 2:
          let actual = bridge.get_std__variant_std__string__double__bool__std__vector_double___std__vector_std__string___2(self)
          return .someBool(actual)
        case 3:
          let actual = bridge.get_std__variant_std__string__double__bool__std__vector_double___std__vector_std__string___3(self)
          return .some[Double](actual.map({ val in val }))
        case 4:
          let actual = bridge.get_std__variant_std__string__double__bool__std__vector_double___std__vector_std__string___4(self)
          return .some[String](actual.map({ val in String(val) }))
        default:
          fatalError("Variant can never have index \(self.index())!")
      }
    }()
  }
}
  


internal extension OldEnum {
  static func fromSwift(_ value: OldEnum) -> OldEnum {
    return value
  }

  func toSwift() -> OldEnum {
    return self
  }
}
  


internal extension bridge.std__variant_bool__OldEnum_ {
  static func fromSwift(_ value: Variant_Bool_OldEnum) -> bridge.std__variant_bool__OldEnum_ {
    return { () -> bridge.std__variant_bool__OldEnum_ in
      switch value {
        case .someBool(let value):
          return margelo.nitro.image.create_std__variant_bool__OldEnum_(value)
        case .someOldEnum(let value):
          return margelo.nitro.image.create_std__variant_bool__OldEnum_(value.rawValue)
      }
    }()
  }

  func toSwift() -> Variant_Bool_OldEnum {
    return { () -> Variant_Bool_OldEnum in
      switch self.index() {
        case 0:
          let actual = bridge.get_std__variant_bool__OldEnum__0(self)
          return .someBool(actual)
        case 1:
          let actual = bridge.get_std__variant_bool__OldEnum__1(self)
          return .someOldEnum(margelo.nitro.image.OldEnum(rawValue: actual)!)
        default:
          fatalError("Variant can never have index \(self.index())!")
      }
    }()
  }
}
  


internal extension Person {
  static func fromSwift(_ value: Person) -> Person {
    return value
  }

  func toSwift() -> Person {
    return self
  }
}
  


internal extension Powertrain {
  static func fromSwift(_ value: Powertrain) -> Powertrain {
    return value
  }

  func toSwift() -> Powertrain {
    return self
  }
}
  


internal extension bridge.std__optional_Person_ {
  static func fromSwift(_ value: Person?) -> bridge.std__optional_Person_ {
    return { () -> bridge.std__optional_Person_ in
      if let actualValue = value {
        return bridge.create_std__optional_Person_(actualValue)
      } else {
        return .init()
      }
    }()
  }

  func toSwift() -> Person? {
    return { () -> Person? in
      if let actualValue = self.value {
        return actualValue
      } else {
        return nil
      }
    }()
  }
}
  


internal extension Car {
  static func fromSwift(_ value: Car) -> Car {
    return value
  }

  func toSwift() -> Car {
    return self
  }
}
  


internal extension bridge.std__variant_Person__Car_ {
  static func fromSwift(_ value: Variant_Person_Car) -> bridge.std__variant_Person__Car_ {
    return { () -> bridge.std__variant_Person__Car_ in
      switch value {
        case .somePerson(let value):
          return margelo.nitro.image.create_std__variant_Person__Car_(value)
        case .someCar(let value):
          return margelo.nitro.image.create_std__variant_Person__Car_(value)
      }
    }()
  }

  func toSwift() -> Variant_Person_Car {
    return { () -> Variant_Person_Car in
      switch self.index() {
        case 0:
          let actual = bridge.get_std__variant_Person__Car__0(self)
          return .somePerson(actual)
        case 1:
          let actual = bridge.get_std__variant_Person__Car__1(self)
          return .someCar(actual)
        default:
          fatalError("Variant can never have index \(self.index())!")
      }
    }()
  }
}
  


internal extension bridge.std__variant_std__shared_ptr_margelo__nitro__image__HybridTestObjectSpec___Person_ {
  static func fromSwift(_ value: Variant_HybridTestObjectSpec_Person) -> bridge.std__variant_std__shared_ptr_margelo__nitro__image__HybridTestObjectSpec___Person_ {
    return { () -> bridge.std__variant_std__shared_ptr_margelo__nitro__image__HybridTestObjectSpec___Person_ in
      switch value {
        case .someHybridTestObjectSpec(let value):
          return margelo.nitro.image.create_std__variant_std__shared_ptr_margelo__nitro__image__HybridTestObjectSpec___Person_(value.createCxxBridge())
        case .somePerson(let value):
          return margelo.nitro.image.create_std__variant_std__shared_ptr_margelo__nitro__image__HybridTestObjectSpec___Person_(value)
      }
    }()
  }

  func toSwift() -> Variant_HybridTestObjectSpec_Person {
    return { () -> Variant_HybridTestObjectSpec_Person in
      switch self.index() {
        case 0:
          let actual = bridge.get_std__variant_std__shared_ptr_margelo__nitro__image__HybridTestObjectSpec___Person__0(self)
          return .someHybridTestObjectSpec(actual.implementation)
        case 1:
          let actual = bridge.get_std__variant_std__shared_ptr_margelo__nitro__image__HybridTestObjectSpec___Person__1(self)
          return .somePerson(actual)
        default:
          fatalError("Variant can never have index \(self.index())!")
      }
    }()
  }
}
  


internal extension bridge.Func_void {
  static func fromSwift(_ value: (() -> Void)) -> bridge.Func_void {
    return { () -> bridge.Func_void in
      let (wrappedClosure, context) = ClosureWrapper.wrap(closure: value)
      return bridge.create_Func_void(wrappedClosure, context)
    }()
  }

  func toSwift() -> (() -> Void) {
    return { () -> Void in
      self()
    }
  }
}
  


internal extension bridge.Func_std__future_double_ {
  static func fromSwift(_ value: (() -> Promise<Double>)) -> bridge.Func_std__future_double_ {
    return { () -> bridge.Func_std__future_double_ in
      let (wrappedClosure, context) = ClosureWrapper.wrap(closure: value)
      return bridge.create_Func_std__future_double_(wrappedClosure, context)
    }()
  }

  func toSwift() -> (() -> Promise<Double>) {
    return { () -> Promise<Double> in
      let result = self()
      return { () -> bridge.PromiseHolder_double_ in
        let promiseHolder = bridge.create_PromiseHolder_double_()
        result
          .then({ promiseHolder.resolve($0) })
          .catch({ promiseHolder.reject(std.string(String(describing: $0))) })
        return promiseHolder
      }()
    }
  }
}
  


internal extension bridge.Func_std__future_std__string_ {
  static func fromSwift(_ value: (() -> Promise<String>)) -> bridge.Func_std__future_std__string_ {
    return { () -> bridge.Func_std__future_std__string_ in
      let (wrappedClosure, context) = ClosureWrapper.wrap(closure: value)
      return bridge.create_Func_std__future_std__string_(wrappedClosure, context)
    }()
  }

  func toSwift() -> (() -> Promise<String>) {
    return { () -> Promise<String> in
      let result = self()
      return { () -> bridge.PromiseHolder_std__string_ in
        let promiseHolder = bridge.create_PromiseHolder_std__string_()
        result
          .then({ promiseHolder.resolve(std.string($0)) })
          .catch({ promiseHolder.reject(std.string(String(describing: $0))) })
        return promiseHolder
      }()
    }
  }
}
  


internal extension ArrayBufferHolder {
  static func fromSwift(_ value: ArrayBufferHolder) -> ArrayBufferHolder {
    return value
  }

  func toSwift() -> ArrayBufferHolder {
    return self
  }
}
  


internal extension bridge.std__unordered_map_std__string__double_ {
  static func fromSwift(_ value: Dictionary<String, Double>) -> bridge.std__unordered_map_std__string__double_ {
    return { () -> bridge.std__unordered_map_std__string__double_ in
      var map = bridge.create_std__unordered_map_std__string__double_(value.count)
      for (k, v) in value {
        map[std.string(k)] = v
      }
      return map
    }()
  }

  func toSwift() -> Dictionary<String, Double> {
    return { () -> Dictionary<String, Double> in
      var dictionary = Dictionary<String, Double>(minimumCapacity: self.size())
      let keys = bridge.get_std__unordered_map_std__string__double__keys(self)
      for key in keys {
        let value = self[key]!
        dictionary[String(key)] = value
      }
      return dictionary
    }()
  }
}
  


internal extension bridge.std__optional_Car_ {
  static func fromSwift(_ value: Car?) -> bridge.std__optional_Car_ {
    return { () -> bridge.std__optional_Car_ in
      if let actualValue = value {
        return bridge.create_std__optional_Car_(actualValue)
      } else {
        return .init()
      }
    }()
  }

  func toSwift() -> Car? {
    return { () -> Car? in
      if let actualValue = self.value {
        return actualValue
      } else {
        return nil
      }
    }()
  }
}
  


internal extension bridge.std__unordered_map_std__string__std__string_ {
  static func fromSwift(_ value: Dictionary<String, String>) -> bridge.std__unordered_map_std__string__std__string_ {
    return { () -> bridge.std__unordered_map_std__string__std__string_ in
      var map = bridge.create_std__unordered_map_std__string__std__string_(value.count)
      for (k, v) in value {
        map[std.string(k)] = std.string(v)
      }
      return map
    }()
  }

  func toSwift() -> Dictionary<String, String> {
    return { () -> Dictionary<String, String> in
      var dictionary = Dictionary<String, String>(minimumCapacity: self.size())
      let keys = bridge.get_std__unordered_map_std__string__std__string__keys(self)
      for key in keys {
        let value = self[key]!
        dictionary[String(key)] = String(value)
      }
      return dictionary
    }()
  }
}
  


internal extension ComplexHolder {
  static func fromSwift(_ value: ComplexHolder) -> ComplexHolder {
    return value
  }

  func toSwift() -> ComplexHolder {
    return self
  }
}
  


internal extension AnotherHolder {
  static func fromSwift(_ value: AnotherHolder) -> AnotherHolder {
    return value
  }

  func toSwift() -> AnotherHolder {
    return self
  }
}
  


internal extension HybridSwiftKotlinTestObjectSpecCxx {
  static func fromSwift(_ value: HybridSwiftKotlinTestObjectSpec) -> HybridSwiftKotlinTestObjectSpecCxx {
    return value.createCxxBridge()
  }

  func toSwift() -> HybridSwiftKotlinTestObjectSpec {
    return self.implementation
  }
}
  


internal extension CallbackHolder {
  static func fromSwift(_ value: CallbackHolder) -> CallbackHolder {
    return value
  }

  func toSwift() -> CallbackHolder {
    return self
  }
}
  


internal extension bridge.std__optional_double_ {
  static func fromSwift(_ value: Double?) -> bridge.std__optional_double_ {
    return { () -> bridge.std__optional_double_ in
      if let actualValue = value {
        return bridge.create_std__optional_double_(actualValue)
      } else {
        return .init()
      }
    }()
  }

  func toSwift() -> Double? {
    return { () -> Double? in
      if let actualValue = self.value {
        return actualValue
      } else {
        return nil
      }
    }()
  }
}
  


internal extension bridge.std__vector_Car_ {
  static func fromSwift(_ value: [Car]) -> bridge.std__vector_Car_ {
    return { () -> bridge.std__vector_Car_ in
      var vector = bridge.create_std__vector_Car_(value.count)
      for item in value {
        vector.push_back(item)
      }
      return vector
    }()
  }

  func toSwift() -> [Car] {
    return self.map({ val in val })
  }
}
