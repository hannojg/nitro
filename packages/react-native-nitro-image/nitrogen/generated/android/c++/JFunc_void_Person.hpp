///
/// JFunc_void_Person.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>
#include <NitroModules/JSIConverter.hpp>

#include <functional>
#include "Person.hpp"
#include "JPerson.hpp"
#include <string>

namespace margelo::nitro::image {

  using namespace facebook;

  /**
   * C++ representation of the callback Func_void_Person.
   * This is a Kotlin `(p: Person) -> Unit`, backed by a `std::function<...>`.
   */
  struct JFunc_void_Person final: public jni::HybridClass<JFunc_void_Person> {
  public:
    static jni::local_ref<JFunc_void_Person::javaobject> fromCpp(const std::function<void(const Person& /* p */)>& func) {
      return JFunc_void_Person::newObjectCxxArgs(func);
    }
    static jni::local_ref<JFunc_void_Person::javaobject> fromCpp(std::function<void(const Person& /* p */)>&& func) {
      return JFunc_void_Person::newObjectCxxArgs(std::move(func));
    }

  public:
    void call(const jni::alias_ref<JPerson>& p) {
      return _func(p->toCpp());
    }

  public:
    inline const std::function<void(const Person& /* p */)>& getFunction() const noexcept {
      return _func;
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/Func_void_Person;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("call", JFunc_void_Person::call)});
    }

  private:
    explicit JFunc_void_Person(const std::function<void(const Person& /* p */)>& func): _func(func) { }
    explicit JFunc_void_Person(std::function<void(const Person& /* p */)>&& func): _func(std::move(func)) { }

  private:
    friend HybridBase;
    std::function<void(const Person& /* p */)> _func;
  };

} // namespace margelo::nitro::image

namespace margelo::nitro {

  // (Args...) => T <> JFunc_void_Person
  template <>
  struct JSIConverter<JFunc_void_Person::javaobject> final {
    static inline jni::alias_ref<JFunc_void_Person::javaobject> fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      return JFunc_void_Person::fromCpp(JSIConverter<std::function<void(const Person& /* p */)>>::fromJSI(runtime, arg));
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const jni::alias_ref<JFunc_void_Person::javaobject>& arg) {
      return JSIConverter<std::function<void(const Person& /* p */)>>::toJSI(runtime, arg->cthis()->getFunction());
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      return JSIConverter<std::function<void(const Person& /* p */)>>::canConvert(runtime, value);
    }
  };

} // namespace margelo::nitro
