///
/// JHybridKotlinTestObjectSpec.cpp
/// Mon Aug 19 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridKotlinTestObjectSpec.hpp"



#include <optional>

namespace margelo::nitro::image {

  jni::local_ref<JHybridKotlinTestObjectSpec::jhybriddata> JHybridKotlinTestObjectSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridKotlinTestObjectSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridKotlinTestObjectSpec::initHybrid),
    });
  }

  size_t JHybridKotlinTestObjectSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  double JHybridKotlinTestObjectSpec::getNumberValue() {
    static const auto method = _javaPart->getClass()->getMethod<double()>("getNumberValue");
    auto result = method(_javaPart);
    return result;
  }
  void JHybridKotlinTestObjectSpec::setNumberValue(double numberValue) {
    static const auto method = _javaPart->getClass()->getMethod<void(double /* numberValue */)>("setNumberValue");
    method(_javaPart, numberValue);
  }
  std::optional<double> JHybridKotlinTestObjectSpec::getOptionalNumber() {
    static const auto method = _javaPart->getClass()->getMethod<jni::alias_ref<jni::JDouble>()>("getOptionalNumber");
    auto result = method(_javaPart);
    return result != nullptr ? std::make_optional(result->value()) : std::nullopt;
  }
  void JHybridKotlinTestObjectSpec::setOptionalNumber(std::optional<double> optionalNumber) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JDouble> /* optionalNumber */)>("setOptionalNumber");
    method(_javaPart, optionalNumber.has_value() ? jni::JDouble::valueOf(optionalNumber.value()) : nullptr);
  }

  // Methods
  

} // namespace margelo::nitro::image
