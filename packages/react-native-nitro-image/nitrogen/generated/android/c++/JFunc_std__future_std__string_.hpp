///
/// JFunc_std__future_std__string_.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include <functional>
#include <future>
#include <string>
#include <NitroModules/JPromise.hpp>

namespace margelo::nitro::image {

  using namespace facebook;

  /**
   * C++ representation of the callback Func_std__future_std__string_.
   * This is a Kotlin `() -> Promise<String>`, backed by a `std::function<...>`.
   */
  struct JFunc_std__future_std__string_ final: public jni::HybridClass<JFunc_std__future_std__string_> {
  public:
    static jni::local_ref<JFunc_std__future_std__string_::javaobject> fromCpp(const std::function<std::future<std::string>()>& func) {
      return JFunc_std__future_std__string_::newObjectCxxArgs(func);
    }

  public:
    std::future<std::string> call() {
      return _func();
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/Func_std__future_std__string_;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("call", JFunc_std__future_std__string_::call)});
    }

  private:
    explicit JFunc_std__future_std__string_(const std::function<std::future<std::string>()>& func): _func(func) { }

  private:
    friend HybridBase;
    std::function<std::future<std::string>()> _func;
  };

} // namespace margelo::nitro::image
