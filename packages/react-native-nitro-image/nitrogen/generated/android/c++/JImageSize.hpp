///
/// JImageSize.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "ImageSize.hpp"
#include <NitroModules/JSIConverter.hpp>



namespace margelo::nitro::image {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "ImageSize" and the the Kotlin data class "ImageSize".
   */
  struct JImageSize final: public jni::JavaClass<JImageSize> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/ImageSize;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct ImageSize by copying all values to C++.
     */
    [[maybe_unused]]
    ImageSize toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldWidth = clazz->getField<double>("width");
      double width = this->getFieldValue(fieldWidth);
      static const auto fieldHeight = clazz->getField<double>("height");
      double height = this->getFieldValue(fieldHeight);
      return ImageSize(
        width,
        height
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JImageSize::javaobject> fromCpp(const ImageSize& value) {
      return newInstance(
        value.width,
        value.height
      );
    }
  };

} // namespace margelo::nitro::image

namespace margelo::nitro {

  using namespace margelo::nitro::image;

  // C++/JNI JImageSize <> JS ImageSize (object)
  template <>
  struct JSIConverter<JImageSize> {
    static inline jni::local_ref<JImageSize> fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      throw std::runtime_error("Not yet implemented!");
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const jni::alias_ref<JImageSize>& arg) {
      jsi::Object obj(runtime);
      throw std::runtime_error("Not yet implemented!");
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      throw std::runtime_error("Not yet implemented!");
      return true;
    }
  };

} // namespace margelo::nitro
