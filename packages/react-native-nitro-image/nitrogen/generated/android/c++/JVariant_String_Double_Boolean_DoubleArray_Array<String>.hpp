///
/// JVariant_String_Double_Boolean_DoubleArray_Array<String>.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <variant>

namespace margelo::nitro::image {

  using namespace facebook;

  class SomeString;
  class SomeDouble;
  class SomeBoolean;
  class SomeDoubleArray;
  class SomeArray_String_;

  /**
   * The C++ JNI bridge between the C++ std::variant and the Java class "Variant_String_Double_Boolean_DoubleArray_Array<String>".
   */
  class JVariant_String_Double_Boolean_DoubleArray_Array<String>: public jni::JavaClass<JVariant_String_Double_Boolean_DoubleArray_Array<String>> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/Variant_String_Double_Boolean_DoubleArray_Array<String>;";

    static jni::local_ref<JVariant_String_Double_Boolean_DoubleArray_Array<String>> create(jni::alias_ref<jni::JString> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_String_Double_Boolean_DoubleArray_Array<String>(jni::alias_ref<jni::JString>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JVariant_String_Double_Boolean_DoubleArray_Array<String>> create(double value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_String_Double_Boolean_DoubleArray_Array<String>(double)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JVariant_String_Double_Boolean_DoubleArray_Array<String>> create(jboolean value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_String_Double_Boolean_DoubleArray_Array<String>(jboolean)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JVariant_String_Double_Boolean_DoubleArray_Array<String>> create(jni::alias_ref<jni::JArrayDouble> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_String_Double_Boolean_DoubleArray_Array<String>(jni::alias_ref<jni::JArrayDouble>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JVariant_String_Double_Boolean_DoubleArray_Array<String>> create(jni::alias_ref<jni::JArrayClass<jni::JString>> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_String_Double_Boolean_DoubleArray_Array<String>(jni::alias_ref<jni::JArrayClass<jni::JString>>)>("create");
      return method(javaClassStatic(), value);
    }

    static jni::local_ref<JVariant_String_Double_Boolean_DoubleArray_Array<String>> fromCpp(const std::variant<std::string, double, bool, std::vector<double>, std::vector<std::string>>& variant) {
      switch (variant.index()) {
        case 0: return create(jni::make_jstring(std::get<0>(variant)));
        case 1: return create(std::get<1>(variant));
        case 2: return create(std::get<2>(variant));
        case 3: return create([&]() {
          size_t size = std::get<3>(variant).size();
          jni::local_ref<jni::JArrayDouble> array = jni::JArrayDouble::newArray(size);
          array->setRegion(0, size, std::get<3>(variant).data());
          return array;
        }());
        case 4: return create([&]() {
          size_t size = std::get<4>(variant).size();
          jni::local_ref<jni::JArrayClass<jni::JString>> array = jni::JArrayClass<jni::JString>::newArray(size);
          for (size_t i = 0; i < size; i++) {
            const auto& element = std::get<4>(variant)[i];
            array->setElement(i, *jni::make_jstring(element));
          }
          return array;
        }());
        default: throw std::runtime_error("Variant holds unknown index! (" + std::to_string(variant.index()) + ")");
      }
    }

    std::variant<std::string, double, bool, std::vector<double>, std::vector<std::string>> toCpp();
  };

  class SomeString: public jni::JavaClass<SomeString, JVariant_String_Double_Boolean_DoubleArray_Array<String>> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/Variant_String_Double_Boolean_DoubleArray_Array<String>$SomeString;";
  
    jni::local_ref<jni::JString> get() {
      static const auto field = javaClassStatic()->getField<jni::JString>("value");
      return getFieldValue(field);
    }
  };
  
  class SomeDouble: public jni::JavaClass<SomeDouble, JVariant_String_Double_Boolean_DoubleArray_Array<String>> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/Variant_String_Double_Boolean_DoubleArray_Array<String>$SomeDouble;";
  
    double get() {
      static const auto field = javaClassStatic()->getField<double>("value");
      return getFieldValue(field);
    }
  };
  
  class SomeBoolean: public jni::JavaClass<SomeBoolean, JVariant_String_Double_Boolean_DoubleArray_Array<String>> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/Variant_String_Double_Boolean_DoubleArray_Array<String>$SomeBoolean;";
  
    jboolean get() {
      static const auto field = javaClassStatic()->getField<jboolean>("value");
      return getFieldValue(field);
    }
  };
  
  class SomeDoubleArray: public jni::JavaClass<SomeDoubleArray, JVariant_String_Double_Boolean_DoubleArray_Array<String>> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/Variant_String_Double_Boolean_DoubleArray_Array<String>$SomeDoubleArray;";
  
    jni::local_ref<jni::JArrayDouble> get() {
      static const auto field = javaClassStatic()->getField<jni::JArrayDouble>("value");
      return getFieldValue(field);
    }
  };
  
  class SomeArray_String_: public jni::JavaClass<SomeArray_String_, JVariant_String_Double_Boolean_DoubleArray_Array<String>> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/Variant_String_Double_Boolean_DoubleArray_Array<String>$SomeArray_String_;";
  
    jni::local_ref<jni::JArrayClass<jni::JString>> get() {
      static const auto field = javaClassStatic()->getField<jni::JArrayClass<jni::JString>>("value");
      return getFieldValue(field);
    }
  };

  std::variant<std::string, double, bool, std::vector<double>, std::vector<std::string>> JVariant_String_Double_Boolean_DoubleArray_Array<String>::toCpp() {
    if (isInstanceOf(SomeString::javaClassStatic())) {
      auto jniValue = static_cast<SomeString*>(this)->get();
      return jniValue->toStdString();
    } else if (isInstanceOf(SomeDouble::javaClassStatic())) {
      auto jniValue = static_cast<SomeDouble*>(this)->get();
      return jniValue;
    } else if (isInstanceOf(SomeBoolean::javaClassStatic())) {
      auto jniValue = static_cast<SomeBoolean*>(this)->get();
      return jniValue;
    } else if (isInstanceOf(SomeDoubleArray::javaClassStatic())) {
      auto jniValue = static_cast<SomeDoubleArray*>(this)->get();
      return [&]() {
      size_t size = jniValue->size();
      std::vector<double> vector;
      vector.reserve(size);
      jniValue->getRegion(0, size, vector.data());
      return vector;
    }();
    } else if (isInstanceOf(SomeArray_String_::javaClassStatic())) {
      auto jniValue = static_cast<SomeArray_String_*>(this)->get();
      return [&]() {
      size_t size = jniValue->size();
      std::vector<std::string> vector;
      vector.reserve(size);
      for (size_t i = 0; i < size; i++) {
        auto element = jniValue->getElement(i);
        vector.push_back(element->toStdString());
      }
      return vector;
    }();
    }
    throw std::runtime_error("Variant is unknown Kotlin instance!");
  }

} // namespace margelo::nitro::image
