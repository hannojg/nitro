///
/// HybridTestObjectSpec.cpp
/// Wed Aug 07 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "HybridTestObjectSpec.hpp"

namespace margelo::nitro::image {

  void HybridTestObjectSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybridGetter("numberValue", &HybridTestObjectSpec::getNumberValue);
    registerHybridSetter("numberValue", &HybridTestObjectSpec::setNumberValue);
    registerHybridGetter("boolValue", &HybridTestObjectSpec::getBoolValue);
    registerHybridSetter("boolValue", &HybridTestObjectSpec::setBoolValue);
    registerHybridGetter("stringValue", &HybridTestObjectSpec::getStringValue);
    registerHybridSetter("stringValue", &HybridTestObjectSpec::setStringValue);
    registerHybridGetter("bigintValue", &HybridTestObjectSpec::getBigintValue);
    registerHybridSetter("bigintValue", &HybridTestObjectSpec::setBigintValue);
    registerHybridGetter("stringOrUndefined", &HybridTestObjectSpec::getStringOrUndefined);
    registerHybridSetter("stringOrUndefined", &HybridTestObjectSpec::setStringOrUndefined);
    registerHybridGetter("stringOrNull", &HybridTestObjectSpec::getStringOrNull);
    registerHybridSetter("stringOrNull", &HybridTestObjectSpec::setStringOrNull);
    registerHybridGetter("optionalString", &HybridTestObjectSpec::getOptionalString);
    registerHybridSetter("optionalString", &HybridTestObjectSpec::setOptionalString);
    registerHybridGetter("valueThatWillThrowOnAccess", &HybridTestObjectSpec::getValueThatWillThrowOnAccess);
    registerHybridSetter("valueThatWillThrowOnAccess", &HybridTestObjectSpec::setValueThatWillThrowOnAccess);
    registerHybridGetter("someVariant", &HybridTestObjectSpec::getSomeVariant);
    registerHybridSetter("someVariant", &HybridTestObjectSpec::setSomeVariant);
    registerHybridGetter("someTuple", &HybridTestObjectSpec::getSomeTuple);
    registerHybridSetter("someTuple", &HybridTestObjectSpec::setSomeTuple);
    registerHybridGetter("self", &HybridTestObjectSpec::getSelf);
    registerHybridMethod("simpleFunc", &HybridTestObjectSpec::simpleFunc);
    registerHybridMethod("multipleArguments", &HybridTestObjectSpec::multipleArguments);
    registerHybridMethod("createMap", &HybridTestObjectSpec::createMap);
    registerHybridMethod("mapRoundtrip", &HybridTestObjectSpec::mapRoundtrip);
    registerHybridMethod("funcThatThrows", &HybridTestObjectSpec::funcThatThrows);
    registerHybridMethod("tryOptionalParams", &HybridTestObjectSpec::tryOptionalParams);
    registerHybridMethod("tryMiddleParam", &HybridTestObjectSpec::tryMiddleParam);
    registerHybridMethod("passVariant", &HybridTestObjectSpec::passVariant);
    registerHybridMethod("getVariantEnum", &HybridTestObjectSpec::getVariantEnum);
    registerHybridMethod("getVariantObjects", &HybridTestObjectSpec::getVariantObjects);
    registerHybridMethod("getVariantHybrid", &HybridTestObjectSpec::getVariantHybrid);
    registerHybridMethod("getVariantTuple", &HybridTestObjectSpec::getVariantTuple);
    registerHybridMethod("flip", &HybridTestObjectSpec::flip);
    registerHybridMethod("passTuple", &HybridTestObjectSpec::passTuple);
    registerHybridMethod("calculateFibonacciSync", &HybridTestObjectSpec::calculateFibonacciSync);
    registerHybridMethod("calculateFibonacciAsync", &HybridTestObjectSpec::calculateFibonacciAsync);
    registerHybridMethod("wait", &HybridTestObjectSpec::wait);
    registerHybridMethod("callCallback", &HybridTestObjectSpec::callCallback);
    registerHybridMethod("getValueFromJSCallback", &HybridTestObjectSpec::getValueFromJSCallback);
    registerHybridMethod("getValueFromJSCallbackAndWait", &HybridTestObjectSpec::getValueFromJSCallbackAndWait);
    registerHybridMethod("callAll", &HybridTestObjectSpec::callAll);
    registerHybridMethod("getValueFromJsCallback", &HybridTestObjectSpec::getValueFromJsCallback);
    registerHybridMethod("getCar", &HybridTestObjectSpec::getCar);
    registerHybridMethod("isCarElectric", &HybridTestObjectSpec::isCarElectric);
    registerHybridMethod("getDriver", &HybridTestObjectSpec::getDriver);
    registerHybridMethod("createArrayBuffer", &HybridTestObjectSpec::createArrayBuffer);
    registerHybridMethod("getBufferLastItem", &HybridTestObjectSpec::getBufferLastItem);
    registerHybridMethod("setAllValuesTo", &HybridTestObjectSpec::setAllValuesTo);
    registerHybridMethod("newTestObject", &HybridTestObjectSpec::newTestObject);
  }

} // namespace margelo::nitro::image
